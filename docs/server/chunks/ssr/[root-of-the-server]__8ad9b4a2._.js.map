{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-recipe-suggestions.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview AI agent that generates recipe suggestions based on user-provided ingredients.\n *\n * - generateRecipeSuggestions - A function that generates recipe suggestions.\n * - GenerateRecipeSuggestionsInput - The input type for the generateRecipeSuggestions function.\n * - GenerateRecipeSuggestionsOutput - The return type for the generateRecipeSuggestions function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateRecipeSuggestionsInputSchema = z.object({\n  ingredients: z\n    .string()\n    .describe('A comma separated list of ingredients to generate recipes from.'),\n});\nexport type GenerateRecipeSuggestionsInput = z.infer<\n  typeof GenerateRecipeSuggestionsInputSchema\n>;\n\nconst GenerateRecipeSuggestionsOutputSchema = z.object({\n  recipes: z.array(\n    z.object({\n      title: z.string().describe('The name of the recipe.'),\n      ingredients: z.string().describe('A comma separated list of ingredients.'),\n    })\n  ).describe('An array of suggested recipes with their corresponding ingredients.')\n});\nexport type GenerateRecipeSuggestionsOutput = z.infer<\n  typeof GenerateRecipeSuggestionsOutputSchema\n>;\n\nexport async function generateRecipeSuggestions(\n  input: GenerateRecipeSuggestionsInput\n): Promise<GenerateRecipeSuggestionsOutput> {\n  return generateRecipeSuggestionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateRecipeSuggestionsPrompt',\n  input: {schema: GenerateRecipeSuggestionsInputSchema},\n  output: {schema: GenerateRecipeSuggestionsOutputSchema},\n  prompt: `You are a recipe suggestion bot. Given a list of ingredients, you will generate 3 simple recipe names and their core ingredients.\n\n  Return the response in a clear, parsable JSON format. Only return the recipe names and ingredients.\n\n  Ingredients: {{{ingredients}}}\n  `,\n});\n\nconst generateRecipeSuggestionsFlow = ai.defineFlow(\n  {\n    name: 'generateRecipeSuggestionsFlow',\n    inputSchema: GenerateRecipeSuggestionsInputSchema,\n    outputSchema: GenerateRecipeSuggestionsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;AACd;AAKA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CACd,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC3B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,IACA,QAAQ,CAAC;AACb;AAKO,eAAe,0BACpB,KAAqC;IAErC,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAoC;IACpD,QAAQ;QAAC,QAAQ;IAAqC;IACtD,QAAQ,CAAC;;;;;EAKT,CAAC;AACH;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA3BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/provide-recipe-instructions.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview This file defines a Genkit flow for providing recipe instructions using the Gemini API.\n *\n * - provideRecipeInstructions - A function that takes a recipe title and ingredients and returns step-by-step cooking instructions.\n * - ProvideRecipeInstructionsInput - The input type for the provideRecipeInstructions function.\n * - ProvideRecipeInstructionsOutput - The return type for the provideRecipeInstructions function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport wav from 'wav';\n\nconst ProvideRecipeInstructionsInputSchema = z.object({\n  title: z.string().describe('The title of the recipe.'),\n  ingredients: z.string().describe('The ingredients required for the recipe.'),\n});\n\nexport type ProvideRecipeInstructionsInput = z.infer<\n  typeof ProvideRecipeInstructionsInputSchema\n>;\n\nconst ProvideRecipeInstructionsOutputSchema = z.object({\n  instructions: z.string().describe('Step-by-step cooking instructions.'),\n});\n\nexport type ProvideRecipeInstructionsOutput = z.infer<\n  typeof ProvideRecipeInstructionsOutputSchema\n>;\n\nexport async function provideRecipeInstructions(\n  input: ProvideRecipeInstructionsInput\n): Promise<ProvideRecipeInstructionsOutput> {\n  return provideRecipeInstructionsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'provideRecipeInstructionsPrompt',\n  input: {schema: ProvideRecipeInstructionsInputSchema},\n  output: {schema: ProvideRecipeInstructionsOutputSchema},\n  prompt: `Provide step-by-step cooking instructions for the following recipe:\n\nRecipe Title: {{{title}}}\nIngredients: {{{ingredients}}}\n\nKeep the instructions clear and concise.`,\n});\n\nconst provideRecipeInstructionsFlow = ai.defineFlow(\n  {\n    name: 'provideRecipeInstructionsFlow',\n    inputSchema: ProvideRecipeInstructionsInputSchema,\n    outputSchema: ProvideRecipeInstructionsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAGA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAMA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC;AAMO,eAAe,0BACpB,KAAqC;IAErC,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAoC;IACpD,QAAQ;QAAC,QAAQ;IAAqC;IACtD,QAAQ,CAAC;;;;;wCAK6B,CAAC;AACzC;AAEA,MAAM,gCAAgC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA3BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport {\n  generateRecipeSuggestions,\n  GenerateRecipeSuggestionsOutput,\n} from \"@/ai/flows/generate-recipe-suggestions\";\nimport {\n  provideRecipeInstructions,\n  ProvideRecipeInstructionsOutput,\n} from \"@/ai/flows/provide-recipe-instructions\";\nimport { z } from \"zod\";\n\nconst generateSchema = z.object({\n  ingredients: z.string().min(3, \"Please enter at least one ingredient.\"),\n});\n\nexport async function generateRecipesAction(prevState: any, formData: FormData): Promise<{\n  recipes?: GenerateRecipeSuggestionsOutput[\"recipes\"];\n  error?: string;\n  timestamp?: number;\n}> {\n  const validatedFields = generateSchema.safeParse({\n    ingredients: formData.get(\"ingredients\"),\n  });\n\n  if (!validatedFields.success) {\n    return {\n      error: validatedFields.error.flatten().fieldErrors.ingredients?.[0],\n      timestamp: Date.now(),\n    };\n  }\n\n  try {\n    const result = await generateRecipeSuggestions({\n      ingredients: validatedFields.data.ingredients,\n    });\n    return { recipes: result.recipes, timestamp: Date.now() };\n  } catch (e) {\n    console.error(e);\n    return {\n      error: \"Failed to generate recipes. The AI might be resting. Please try again later.\",\n      timestamp: Date.now(),\n    };\n  }\n}\n\nconst instructionsSchema = z.object({\n  title: z.string(),\n  ingredients: z.string(),\n});\n\nexport async function getInstructionsAction(\n  title: string,\n  ingredients: string\n): Promise<{ instructions?: string; error?: string }> {\n  const validatedFields = instructionsSchema.safeParse({ title, ingredients });\n\n  if (!validatedFields.success) {\n    return { error: \"Invalid recipe data provided.\" };\n  }\n\n  try {\n    const result = await provideRecipeInstructions(validatedFields.data);\n    return { instructions: result.instructions };\n  } catch (e) {\n    console.error(e);\n    return {\n      error: \"Failed to get instructions. The AI seems to be busy. Please try again later.\",\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAEA;AAIA;AAIA;;;;;;;AAEA,MAAM,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AACjC;AAEO,eAAe,sBAAsB,SAAc,EAAE,QAAkB;IAK5E,MAAM,kBAAkB,eAAe,SAAS,CAAC;QAC/C,aAAa,SAAS,GAAG,CAAC;IAC5B;IAEA,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,OAAO;YACL,OAAO,gBAAgB,KAAK,CAAC,OAAO,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,EAAE;YACnE,WAAW,KAAK,GAAG;QACrB;IACF;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,uJAAA,CAAA,4BAAyB,AAAD,EAAE;YAC7C,aAAa,gBAAgB,IAAI,CAAC,WAAW;QAC/C;QACA,OAAO;YAAE,SAAS,OAAO,OAAO;YAAE,WAAW,KAAK,GAAG;QAAG;IAC1D,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC;QACd,OAAO;YACL,OAAO;YACP,WAAW,KAAK,GAAG;QACrB;IACF;AACF;AAEA,MAAM,qBAAqB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM;IACf,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM;AACvB;AAEO,eAAe,sBACpB,KAAa,EACb,WAAmB;IAEnB,MAAM,kBAAkB,mBAAmB,SAAS,CAAC;QAAE;QAAO;IAAY;IAE1E,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC5B,OAAO;YAAE,OAAO;QAAgC;IAClD;IAEA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,uJAAA,CAAA,4BAAyB,AAAD,EAAE,gBAAgB,IAAI;QACnE,OAAO;YAAE,cAAc,OAAO,YAAY;QAAC;IAC7C,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC;QACd,OAAO;YACL,OAAO;QACT;IACF;AACF;;;IAtDsB;IAmCA;;AAnCA,+OAAA;AAmCA,+OAAA","debugId":null}},
    {"offset": {"line": 455, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateRecipesAction as '60d91f29a886327ed195049b62afd2cb1044f26d1f'} from 'ACTIONS_MODULE0'\nexport {getInstructionsAction as '608722f7de51a8fe710d748d8b8d7e62e900e777c1'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 510, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/RecipeGenerator.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/RecipeGenerator.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/RecipeGenerator.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAsS,GACnU,oEACA","debugId":null}},
    {"offset": {"line": 524, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/RecipeGenerator.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/RecipeGenerator.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/RecipeGenerator.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAkR,GAC/S,gDACA","debugId":null}},
    {"offset": {"line": 538, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import RecipeGenerator from '@/components/RecipeGenerator';\nimport { Sparkles } from 'lucide-react';\n\nexport default function Home() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <section className=\"text-center py-12 md:py-20\">\n        <div className=\"mb-4 inline-flex items-center justify-center rounded-full bg-primary/10 px-4 py-2 text-sm font-semibold text-primary\">\n          <Sparkles className=\"mr-2 h-4 w-4\" />\n          Powered by Gemini AI\n        </div>\n        <h1 className=\"font-headline text-4xl md:text-6xl font-bold tracking-tighter text-gray-900 dark:text-white\">\n          AI Recipe Curator\n        </h1>\n        <p className=\"mx-auto mt-4 max-w-2xl text-lg text-muted-foreground\">\n          Tell us what's in your pantry, and we'll whip up some delicious recipe ideas for you.\n          Less waste, more taste!\n        </p>\n      </section>\n\n      <RecipeGenerator />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAQ,WAAU;;kCACjB,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,0MAAA,CAAA,WAAQ;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;kCAGvC,8OAAC;wBAAG,WAAU;kCAA8F;;;;;;kCAG5G,8OAAC;wBAAE,WAAU;kCAAuD;;;;;;;;;;;;0BAMtE,8OAAC,qIAAA,CAAA,UAAe;;;;;;;;;;;AAGtB","debugId":null}}]
}